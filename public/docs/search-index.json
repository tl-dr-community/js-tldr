[
  {
    "body": "# Array.from()\n\nThe **`from`** method creates a _new_, _shallow-copied_ `array` from an array-like or iterable object.\n\n## Syntax\n\n```js\nArray.from(arrayLike, mapFn, thisArgument);\n```\n\n## Usage example\n\n```js\nArray.from('foo'); // -> [ \"f\", \"o\", \"o\" ]\n\nArray.from(new Set(['foo', 'bar', 'baz', 'foo'])); // -> [ \"foo\", \"bar\", \"baz\" ]\n\nArray.from(\n  new Map([\n    [1, 2],\n    [2, 4],\n    [4, 8],\n  ]),\n); // -> [[1, 2], [2, 4], [4, 8]]\n\nconst mapper = new Map([\n  ['1', 'a'],\n  ['2', 'b'],\n]);\nArray.from(mapper.values()); // -> ['a', 'b'];\nArray.from(mapper.keys()); // -> ['1', '2'];\n\nArray.from([1, 2, 3], x => x + x); // -> [2, 4, 6]\nArray.from({ length: 5 }, (v, i) => i); // -> [0, 1, 2, 3, 4]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n",
    "category": "methods",
    "name": "from",
    "path": "/docs/Array/from",
    "searchString": "Array.from"
  },
  {
    "body": "# Array.isArray()\n\nThe **`isArray`** method determines whether the passed `value` is an **Array**.\n\n## Syntax\n\n```js\nconst result = Array.isArray(value);\n```\n\n## Usage examples\n\n```js\nArray.isArray([]); // -> true\nArray.isArray([1, 2, 3]); // -> true\nArray.isArray(new Array()); // -> true\nArray.isArray(); // -> false\nArray.isArray(new Uint8Array(32)); // -> false\nArray.isArray({ __proto__: Array.prototype }); // -> false\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)\n",
    "category": "methods",
    "name": "isArray",
    "path": "/docs/Array/isArray",
    "searchString": "Array.isArray"
  },
  {
    "body": "# Array.of()\n\nThe **`Array.of`** method creates a _new_ `array` from a variable number of `arguments`.\n\n## Syntax\n\n```js\nconst newArray = Array.of(element0, element1, ..., elementN);\n```\n\n## Usage examples\n\n```js\nArray.of(1); // -> [1]\nArray.of(1, 2, 3); // -> [1, 2, 3]\nArray.of(undefined); // -> [undefined]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)\n",
    "category": "methods",
    "name": "of",
    "path": "/docs/Array/of",
    "searchString": "Array.of"
  },
  {
    "body": "# Array.prototype.concat()\n\nThe **`concat`** method creates a `new array` consisting of the elements of the `original array` followed in order by for each element of array argument or arguments itself.\n\n> NOTE: It does not recurse into nested array arguments.\n\n## Syntax\n\n```js\nconst newArray = originalArray.concat(value1, ..., valueN);\n```\n\n## Usage examples\n\n```js\n['a', 'b', 'c'].concat([1, 2, 3]); // -> ['a', 'b', 'c', 1, 2, 3]\n\n[1, 2, 3].concat(4, 5, 6, [7, 8, 9]); // -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n['a', 'b', 'c'].concat(1, [2, 3], [[4]]); // -> ['a', 'b', 'c', 1, 2, 3, [4]]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\n",
    "category": "methods",
    "name": "concat",
    "path": "/docs/Array/concat",
    "searchString": "Array.prototype.concat"
  },
  {
    "body": "# Array.prototype.copyWithin()\n\nThe **`copyWithin`** method shallow copies part of an `array` to another location in the same array without modifying its length and returns itself.\n\n## Syntax\n\n```js\narray.copyWithin(target, startIndex, endIndex);\n```\n\n## Usage examples\n\n```js\n[1, 2, 3, 4, 5].copyWithin(-2); // -> [1, 2, 3, 1, 2]\n[1, 2, 3, 4, 5].copyWithin(0, 3); // -> [4, 5, 3, 4, 5]\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4); // -> [4, 2, 3, 4, 5]\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1); // -> [1, 2, 3, 3, 4]\n[].copyWithin.call({ length: 5, 3: 1 }, 0, 3); // -> {0: 1, 3: 1, length: 5}\n```\n\nES2015 Typed Arrays are subclasses of Array:\n\n```js\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2); // -> Int32Array [3, 4, 5, 4, 5]\n\n// On platforms that are not yet ES2015 compliant:\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4); // -> Int32Array [4, 2, 3, 4, 5]\n```\n\n---\n\n[MDM refeerence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n",
    "category": "methods",
    "name": "copyWithin",
    "path": "/docs/Array/copyWithin",
    "searchString": "Array.prototype.copyWithin"
  },
  {
    "body": "# Array.prototype.entries()\n\nThe **`entries`** method returns a _new_ `iterator` object that contains the `key/value` pairs for each index in the `array`.\n\n## Syntax\n\n```js\narray.entries();\n```\n\n## Usage examples\n\n```js\nfor (let entry of ['a', 'b', 'c'].entries()) {\n  console.log(entry);\n}\n// -> [0, 'a']\n// -> [1, 'b']\n// -> [2, 'c']\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)\n",
    "category": "methods",
    "name": "entries",
    "path": "/docs/Array/entries",
    "searchString": "Array.prototype.entries"
  },
  {
    "body": "# Array.prototype.every()\n\nThe **`every`** method tests whether all elements in the `array` pass the test implemented by the provided `function`. It returns a `boolean` value.\n\nYou may pass a reference for `this` to be used within test function.\n\n> NOTE: This method returns `true` for any condition put on an empty array.\n\n## Syntax\n\n```js\nconst result = array.every((element, index, array) => Boolean, thisArgument);\n```\n\n## Usage examples\n\n```js\nconst moreThanTen = element => element > 10;\n[12, 5, 8, 130, 44].every(moreThanTen); // -> false\n[12, 54, 18, 130, 44].every(moreThanTen); // -> true\n[].every(moreThanTen); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\n",
    "category": "methods",
    "name": "every",
    "path": "/docs/Array/every",
    "searchString": "Array.prototype.every"
  },
  {
    "body": "# Array.prototype.fill()\n\nThe **`fill`** method fills all the elements of an `array` with a static `value`.\n\n> NOTE: This method modifies original array.\n\n## Syntax\n\n```js\noriginalArray.fill(value, startIndex, endIndex);\n```\n\n## Usage examples\n\n```js\n[1, 2, 3].fill(4); // [4, 4, 4]\n[1, 2, 3].fill(4, 1); // -> [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2); // -> [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1); // -> [1, 2, 3]\n[1, 2, 3].fill(4, 3, 3); // -> [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2); // -> [4, 2, 3]\nArray(3).fill(4); // -> [4, 4, 4]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n",
    "category": "methods",
    "name": "fill",
    "path": "/docs/Array/fill",
    "searchString": "Array.prototype.fill"
  },
  {
    "body": "# Array.prototype.filter()\n\nThe **`filter`** method creates a new array with all elements that pass the test implemented by the provided function.\n\n> NOTE: You may pass a reference for `this` to be used within test function.\n\n## Syntax\n\n```js\nconst modifiedArray = originalArray.filter(\n  (callback(element, index, array): Boolean),\n  thisArgument,\n);\n```\n\n## Usage examples\n\n```js\nconst words = ['too', 'long', 'did', 'not', 'read'];\nwords.filter(word => word.length > 3);\n// -> [\"long\", \"read\"]\n\n['too', 'long', 'did', 'not', 'read'].filter(word => word.length > 3);\n// -> [\"long\", \"read\"]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n",
    "category": "methods",
    "name": "filter",
    "path": "/docs/Array/filter",
    "searchString": "Array.prototype.filter"
  },
  {
    "body": "# Array.prototype.find()\n\nThe **`find`** method returns the `value` of a first element in `array` that satisfies testing `function`.\n\n> NOTE: You may pass a reference for `this` to be used within test function.\n\n## Syntax\n\n```js\nconst value = array.find((element, index, array) => Boolean, thisArgument);\n```\n\n## Usage examples\n\n```js\nconst users = [\n  { name: 'Michelangelo', country: 'Italy' },\n  { name: 'Vinton Gray Cerf', country: 'USA' },\n  { name: 'Egor Letov', country: 'Russia' },\n  { name: 'Arthur Morgan', country: 'USA' },\n];\nusers.find(({ country }) => country === 'USA'); // -> {name: \"Vinton Gray Cerf\", country: \"USA\"}\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n",
    "category": "methods",
    "name": "find",
    "path": "/docs/Array/find",
    "searchString": "Array.prototype.find"
  },
  {
    "body": "# Array.prototype.findIndex()\n\nThe **`findIndex`** method returns the `index` of the first element in the `array` that satisfies testing `function`.\n\n> NOTE: You may pass a reference for `this` to be used within test function.\n\n> NOTE: If no element passed the test, **`findIndex`** returns **-1**\n\n## Syntax\n\n```js\nconst index = array.findIndex((element, index, array) => Boolean, thisArgument);\n```\n\n## Usage examples\n\n```js\n[1952, 1956, 1960, 1964].findIndex(year => year > 1959);\n// -> 2\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\n",
    "category": "methods",
    "name": "findIndex",
    "path": "/docs/Array/findIndex",
    "searchString": "Array.prototype.findIndex"
  },
  {
    "body": "# Array.prototype.flat()\n\nThe **`flat`** method creates a _new_ `array` with all sub-array elements concatenated into it recursively up to the specified depth.\n\n> NOTE: If you want to flatten all sub-arrays and don't want to count necessary depth - use 'Infinity' as argument\n\n> NOTE: The flat method removes empty slots in arrays.\n\n## Syntax\n\n```js\nconst modifiedArray = originalArray.flat(depth);\n```\n\n## Usage examples\n\n```js\nconst modifiedArray = [\n  'first',\n  'layer',\n  ['second', 'layer', ['and', 'third', 'layer']],\n].flat();\n// -> ['first', 'layer', 'second', 'layer', [\"and\", \"third\", \"layer\"]]\nconst modifiedArray = [\n  'first',\n  'layer',\n  ['second', 'layer', ['and', 'third', 'layer']],\n].flat(2);\n// -> [\"first\", \"layer\", \"second\", \"layer\", \"and\", \"third\", \"layer\"]\nconst modifiedArray = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]].flat(Infinity);\n// -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n",
    "category": "methods",
    "name": "flat",
    "path": "/docs/Array/flat",
    "searchString": "Array.prototype.flat"
  },
  {
    "body": "# Array.prototype.flatMap()\n\nThe **`flatMap`** method first maps each element using a `mapping function`, then flattens the result into a _new_ `array`.\n\n> NOTE: You may pass a reference for `this` to be used within test function.\n\n## Syntax\n\n```js\nconst newArray = originalArray.flatMap(\n  (currentValue, index, array) => Boolean,\n  thisArgument,\n);\n```\n\n## Usage examples\n\n```js\nconst array = [1, 2, 3, 4];\narray.map(x => [x * 2]); // -> [[2], [4], [6], [8]]\narray.flatMap(x => [x * 2]); // -> [2, 4, 6, 8]\narray.flatMap(x => [[x * 2]]); // -> [[2], [4], [6], [8]]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n",
    "category": "methods",
    "name": "flatMap",
    "path": "/docs/Array/flatMap",
    "searchString": "Array.prototype.flatMap"
  },
  {
    "body": "# Array.prototype.forEach()\n\nThe **`forEach`** method executes a provided `function` once for each `array` element.\n\n## Syntax\n\n```js\narray.forEach((currentValue index,  array) => {}, thisArg);\n```\n\n## Usage examples\n\n```js\nconst array = [1, 2, 3];\n\narray.forEach((element, index) => {\n  array[index] = element + 1;\n});\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n",
    "category": "methods",
    "name": "forEach",
    "path": "/docs/Array/forEach",
    "searchString": "Array.prototype.forEach"
  },
  {
    "body": "# Array.prototype.includes()\n\nThe **`includes`** method determines whether an `array` includes a certain value among its entries, returning a boolean value as a `result`.\n\n## Syntax\n\n```js\nconst result = array.includes(value, fromIndex);\n```\n\n## Usage examples\n\n```js\nconst array = [1, 2, 3];\narray.includes(2); // -> true\narray.includes(4); // -> false\narray.includes(3, 3); // -> false\narray.includes(3, -1); // -> true\n[1, 2, NaN].includes(NaN); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n",
    "category": "methods",
    "name": "includes",
    "path": "/docs/Array/includes",
    "searchString": "Array.prototype.includes"
  },
  {
    "body": "# Array.prototype.indexOf()\n\nThe **`indexOf`** method returns the first `index` at which a `search value` can be found in the `array`, or **-1** if it is not present.\n\n## Syntax\n\n```js\nconst index = array.indexOf(searchValue, fromIndex);\n```\n\n## Usage examples\n\n```js\nvar array = [2, 9, 9];\narray.indexOf(2); // -> 0\narray.indexOf(7); // -> -1\narray.indexOf(9, 2); // ->  2\narray.indexOf(2, -1); // -> -1\narray.indexOf(2, -3); // -> 0\n```\n",
    "category": "methods",
    "name": "indexOf",
    "path": "/docs/Array/indexOf",
    "searchString": "Array.prototype.indexOf"
  },
  {
    "body": "# Array.prototype.join()\n\nThe **`join`** method creates and returns a _new_ `string` by concatenating all of the elements in an `array` (or an array-like object), separated by commas or a specified `separator string`.\nIf the `array` has only one item, then that item will be returned without using the separator.\n\n## Syntax\n\n```js\nconst string = array.join(separator);\n```\n\n## Usage examples\n\n```js\nconst array = ['Wind', 'Water', 'Fire'];\narray.join(); // -> 'Wind,Water,Fire'\narray.join(', '); // -> 'Wind, Water, Fire'\narray.join(' + '); // -> 'Wind + Water + Fire'\narray.join(''); // -> 'WindWaterFire'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n",
    "category": "methods",
    "name": "join",
    "path": "/docs/Array/join",
    "searchString": "Array.prototype.join"
  },
  {
    "body": "# Array.prototype.keys()\n\nThe **`keys`** method returns a new `iterator` that contains the keys for each index in the `array`.\n\n## Syntax\n\n```js\nconst iterator = array.keys();\n```\n\n## Usage examples\n\n```js\nconst array = ['a', , 'c'];\nObject.keys(array); // -> ['0', '2']\n[...array.keys()]; // -> [0, 1, 2]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)\n",
    "category": "methods",
    "name": "keys",
    "path": "/docs/Array/keys",
    "searchString": "Array.prototype.keys"
  },
  {
    "body": "# Array.prototype.lastIndexOf()\n\nThe **`lastIndexOf`** method returns the last `index` at which a `search element` can be found in the `array`, or -1 if it is not present.\nThe array is searched backwards, starting at `fromIndex`.\n\n## Syntax\n\n```js\nconst index = array.lastIndexOf(searchElement, fromIndex);\n```\n\n## Usage examples\n\n```js\nconst array = [2, 5, 9, 2];\narray.lastIndexOf(2); // -> 3\narray.lastIndexOf(7); // -> -1\narray.lastIndexOf(2, 3); // -> 3\narray.lastIndexOf(2, 2); // -> 0\narray.lastIndexOf(2, -2); // -> 0\narray.lastIndexOf(2, -1); // -> 3\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\n",
    "category": "methods",
    "name": "lastIndexOf",
    "path": "/docs/Array/lastIndexOf",
    "searchString": "Array.prototype.lastIndexOf"
  },
  {
    "body": "# Array.prototype.map()\n\nThe **`map`** method creates a _new_ `array` with the results of calling a provided `function` on _every_ element in the calling `array`.\nYou may pass a reference for `this` to be used within test function.\n\n## Syntax\n\n```js\nconst newArray = array.map(\n  (element, index, array) => elementToIncludeInNewArray,\n  thisArgument,\n);\n```\n\n## Usage examples\n\n```js\n[1, 4, 9].map(n => n * 2); // -> [2, 8, 18]\n[1, 4, 9].map(Math.sqrt); // -> [1, 2, 3]\n\n[\n  { key: 1, value: 10 },\n  { key: 2, value: 20 },\n  { key: 3, value: 30 },\n].map(({ key, value }) => ({ [key]: value })); // -> [{1: 10}, {2: 20}, {3: 30}],\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n",
    "category": "methods",
    "name": "map",
    "path": "/docs/Array/map",
    "searchString": "Array.prototype.map"
  },
  {
    "body": "# Array.prototype.pop()\n\nThe **`pop`** method _removes_ the last element from an `array` and returns that `element`.\n\n> NOTE: This method changes original `array`.\n\n## Syntax\n\n```js\nconst lastElement = array.pop();\n```\n\n## Usage examples\n\n```js\nconst fishArray = ['angel', 'clown', 'mandarin', 'sturgeon'];\nconst lastFish = myFish.pop(); // -> 'sturgeon'\nfishArray; // -> ['angel', 'clown', 'mandarin' ]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)\n",
    "category": "methods",
    "name": "pop",
    "path": "/docs/Array/pop",
    "searchString": "Array.prototype.pop"
  },
  {
    "body": "# Array.prototype.push()\n\nThe **`push`** method adds one or more elements to the end of an `array` and returns the new `length` of the `array`.\n\n> NOTE: This method changes original `array`.\n\n## Syntax\n\n```js\nconst updatedLength = array.push(element1, ..., elementN);\n```\n\n## Usage examples\n\n```js\nconst animals = ['pigs', 'goats', 'sheep'];\nanimals.push('cows'); // -> 4\nanimals; // -> ['pigs', 'goats', 'sheep', 'cows']\n\nconst vegetables = ['parsnip', 'potato'];\nconst moreVegs = ['celery', 'beetroot'];\nvegetables.push(...moreVegs); // -> 4\nvegetables; // -> ['parsnip', 'potato', 'celery', 'beetroot']\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\n",
    "category": "methods",
    "name": "push",
    "path": "/docs/Array/push",
    "searchString": "Array.prototype.push"
  },
  {
    "body": "# Array.prototype.reduce()\n\nThe **`reduce`** method executes a `reducer function` on each `element` of the `array`, resulting in a single output `value`.\n\n## Syntax\n\n```js\nconst value = array.reduce(\n  (accumulator, element, index, array) => updatedAccumulator,\n  initialAccumulator,\n);\n```\n\n## Usage examples\n\n```js\n[0, 1, 2, 3].reduce((accumulator, element) => accumulator + element, 0); // -> 6\n\n[\n  { id: 1, value: 'One' },\n  { id: 2, value: 'Two' },\n  { id: 3, value: 'Three' },\n].reduce((accumulator, element) => [accumulator, element].join('+') ''); // -> 'One+Two+Three'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n",
    "category": "methods",
    "name": "reduce",
    "path": "/docs/Array/reduce",
    "searchString": "Array.prototype.reduce"
  },
  {
    "body": "# Array.prototype.reduceRight()\n\nThe **`reduceRight`** method applies a `function` against an `accumulator` and each `element` of the `array` from right-to-left to reduce it to a single value.\n\n## Syntax\n\n```js\nconst resultAccumulator = array.reduceRight(\n  (accumulator, currentValue, index, array) => updatedAccumulator,\n  initialAccumulator,\n);\n```\n\n## Usage examples\n\n```js\n[0, 1, 2, 3].reduceRight((accumulator, element) => a + b); // -> 6\n\n[\n  { id: 1, value: 'One' },\n  { id: 2, value: 'Two' },\n  { id: 3, value: 'Three' },\n].reduce((accumulator, element) => [accumulator, element].join('+') ''); // -> 'Three+Two+One'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight)\n",
    "category": "methods",
    "name": "reduceRight",
    "path": "/docs/Array/reduceRight",
    "searchString": "Array.prototype.reduceRight"
  },
  {
    "body": "# Array.prototype.reverse()\n\nThe **`reverse`** method reverses an `array` [_in place_](https://en.wikipedia.org/wiki/In-place_algorithm). The first `array element` becomes the last, and the `last array element` becomes the `first`.\n\n## Syntax\n\n```js\narray = array.reverse();\n```\n\n## Usage examples\n\n```js\nconst array = [1, 2, 3, 4];\narray.reverse(); // -> [4, 3, 2, 1]\narray; // -> [4, 3, 2, 1]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n",
    "category": "methods",
    "name": "reverse",
    "path": "/docs/Array/reverse",
    "searchString": "Array.prototype.reverse"
  },
  {
    "body": "# Array.prototype.shift()\n\nThe **`shift`** method removes the **first** element from an `array` and returns that `removed element`. This method changes the length of the `array`.\n\n## Syntax\n\n```js\nconst removedElement = array.shift();\n```\n\n## Usage examples\n\n```js\nconst array = ['angel', 'clown', 'mandarin', 'surgeon'];\narray.shift(); // -> 'angel'\narray; // -> ['clown', 'mandarin', 'surgeon']\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)\n",
    "category": "methods",
    "name": "shift",
    "path": "/docs/Array/shift",
    "searchString": "Array.prototype.shift"
  },
  {
    "body": "# Array.prototype.slice()\n\nThe **`slice`** method returns a shallow copy of a portion of an `array` into a new array selected from `begin` to `end` indexes (end not included).\nThe original array will not be modified.\n\n## Syntax\n\n```js\nconst newArray = originalArray.slice(beginIndex, endIndex);\n```\n\n## Usage examples\n\n```js\n[1, 2, 3].slice(); // -> [1, 2, 3]\n[1, 2, 3, 4, 5].slice(2); // -> [3, 4, 5]\n[1, 2, 3, 4, 5].slice(2, 3); // -> [3, 4]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n",
    "category": "methods",
    "name": "slice",
    "path": "/docs/Array/slice",
    "searchString": "Array.prototype.slice"
  },
  {
    "body": "# Array.prototype.some()\n\nThe **`some`** method tests whether _at least one_ `element` in the `array` passes the `test function`.\nIt returns a `Boolean` value.\nYou may pass a reference for `this` to be used within test function.\n\n## Syntax\n\n```js\nconst result = array.some((element, index, array) => Boolean, thisArgument);\n```\n\n## Usage examples\n\n```js\nconst isBiggerThan10 => (element) => element > 10;\n\n[2, 5, 8, 1, 4].some(isBiggerThan10); // -> false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // -> true\n[].some(isBiggerThan10); // -> false\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n",
    "category": "methods",
    "name": "some",
    "path": "/docs/Array/some",
    "searchString": "Array.prototype.some"
  },
  {
    "body": "# Array.prototype.sort()\n\nThe **`sort`** method sorts the elements of an `array` _in place_ and returns the `sorted array`.\n\nThe default sort order is _ascending_, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values. You may pass own implementation `compare function`.\n\n## Syntax\n\n```js\narray = array.sort(compareFunction);\n```\n\n## Usage examples\n\n```js\n['C', 'B', 'D', 'A'].sort(); // -> ['A', 'B', 'C', 'D']\n\n['réservé', 'premier', 'cliché', 'communiqué', 'café', 'adieu'].sort((a, b) =>\n  a.localeCompare(b),\n); // -> ['adieu', 'café', 'cliché', 'communiqué', 'premier', 'réservé']\n\n[3, 5, 2, 1, 4].sort((a, b) => a - b); // -> [1, 2, 3, 4, 5]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n",
    "category": "methods",
    "name": "sort",
    "path": "/docs/Array/sort",
    "searchString": "Array.prototype.sort"
  },
  {
    "body": "# Array.prototype.splice()\n\nThe **`splice`** method changes the contents of an `array` by removing or replacing existing `elements` and/or adding new `elements` **in place**, returning the array of removed elements\n\n## Syntax\n\n```js\nconst removedElements = array.splice(start, deleteCount, item1, ..., itemN);\n```\n\n## Usage examples\n\n```js\nconst array = ['angel', 'clown', 'mandarin', 'sturgeon'];\narray.splice(2, 0, 'drum'); // -> []\narray; // -> [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\narray.splice(3, 3, 'guitar', 'ukulele'); // -> [\"mandarin\", \"sturgeon\"]\narray; // -> [\"angel\", \"clown\", \"drum\", \"guitar\", \"ukulele\"]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n",
    "category": "methods",
    "name": "splice",
    "path": "/docs/Array/splice",
    "searchString": "Array.prototype.splice"
  },
  {
    "body": "# Array.prototype.toLocaleString()\n\nThe **`toLocaleString`** method returns a `string` representing the elements of the `array`.\nThe elements are converted to strings using their `toLocaleString` methods and these strings are separated by a locale-specific string (such as a comma “,”).\n\n## Syntax\n\n```js\narr.toLocaleString(locales, options);\n```\n\n## Usage examples\n\n```js\n['￥7', 500, 8123, 12].toLocaleString('ja-JP', {\n  style: 'currency',\n  currency: 'JPY',\n}); // -> \"￥7,￥500,￥8,123,￥12\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)\n",
    "category": "methods",
    "name": "toLocaleString",
    "path": "/docs/Array/toLocaleString",
    "searchString": "Array.prototype.toLocaleString"
  },
  {
    "body": "# Array.prototype.toString()\n\nThe **`toString`** method returns a `string` representing the specified `array` and its elements.\n\n## Syntax\n\n```js\nconst string = array.toString();\n```\n\n## Usage examples\n\n```js\n['Am', 'I', 'Array', 'Or', 'String', '?'].toString() // -> \"Am,I,Array,Or,String,?\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString)\n",
    "category": "methods",
    "name": "toString",
    "path": "/docs/Array/toString",
    "searchString": "Array.prototype.toString"
  },
  {
    "body": "# Array.prototype.unshift()\n\nThe **`unshift`** method inserts the given elements to the _beginning_ of an `array` or array-like object.\nResult of **`unshift`** call is length of modified array.\n\n## Syntax\n\n```js\nconst arrayLength = array.unshift(value1, ..., valueN);\n```\n\n## Usage examples\n\n```js\nconst array = [1, 2];\narray.unshift(0); // -> 3\narray; // -> [0, 1, 2]\narray.unshift(-2, -1); // 5\narray; // -> [-2, -1, 0, 1, 2]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\n",
    "category": "methods",
    "name": "unshift",
    "path": "/docs/Array/unshift",
    "searchString": "Array.prototype.unshift"
  },
  {
    "body": "# Array.prototype.concat()\r\n\r\nThe **`values`** method returns a new `iterator` that contains the elements for each `index` in the `array`.\r\n\r\n## Syntax\r\n\r\n```js\r\nconst iterator = array.values();\r\n```\r\n\r\n## Usage examples\r\n\r\n```js\r\nconst array = ['a', 'b', 'c', 'd', 'e'];\r\nconst iterator1 = array.values();\r\n\r\nfor (let letter of iterator1) {\r\n  console.log(letter);\r\n} // -> \"a\" \"b\" \"c\" \"d\" \"e\"\r\n\r\niterator1.next().value; // -> undefined\r\n\r\narray; // -> ['a', 'b', 'c', 'd', 'e']\r\n\r\nconst iterator2 = array.values();\r\niterator2.next().value; // -> \"a\"\r\narray[1] = 'n';\r\niterator2.next().value; // -> \"n\"\r\n```\r\n\r\n---\r\n\r\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values)\r\n",
    "category": "methods",
    "name": "values",
    "path": "/docs/Array/values",
    "searchString": "Array.prototype.values"
  },
  {
    "body": "# Number.isFinite()\n\nThe **`isFinite`** method determines whether the passed `value` is a **finite number**.\n\n> NOTE: returns boolean.\n\n## Syntax\n\n```js\nconst result = Number.isFinite(value);\n```\n\n## Usage examples\n\n```js\nNumber.isFinite(5);\n// -> true\nNumber.isFinite(1 / 0);\n// -> false\nNumber.isFinite(10 / 5);\n// -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite)\n",
    "category": "methods",
    "name": "isFinite",
    "path": "/docs/Number/isFinite",
    "searchString": "Number.isFinite"
  },
  {
    "body": "# Number.isInteger()\n\nThe **`isInteger`** method determines whether the passed `value` is an **integer**.\n\n> NOTE: returns boolean.\n\n## Syntax\n\n```js\nconst result = Number.isInteger(value);\n```\n\n## Usage examples\n\n```js\nNumber.isInteger(0.1);\n// -> false\nNumber.isInteger(Math.PI);\n// -> false\nNumber.isInteger([1]);\n// -> false\nNumber.isInteger(5.0);\n// -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger)\n",
    "category": "methods",
    "name": "isInteger",
    "path": "/docs/Number/isInteger",
    "searchString": "Number.isInteger"
  },
  {
    "body": "# Number.isNaN()\n\nThe **`isNaN`** method determines whether the passed `value` is `NaN` and its type is **Number**.\n\n> NOTE: returns boolean.\n\n## Syntax\n\n```js\nconst result = Number.isNaN(value);\n```\n\n## Usage examples\n\n```js\nNumber.isNaN(0 / 0);\n// -> true\nNumber.isNaN(NaN);\n// -> true\n\n//These all return false:\nNumber.isNaN(true);\nNumber.isNaN(null);\nNumber.isNaN(37);\nNumber.isNaN('37');\nNumber.isNaN('37.37');\nNumber.isNaN('');\nNumber.isNaN(' ');\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)\n",
    "category": "methods",
    "name": "isNaN",
    "path": "/docs/Number/isNaN",
    "searchString": "Number.isNaN"
  },
  {
    "body": "# Number.isSafeInteger()\n\nThe **`isSafeInteger`** method determines whether the provided `value` is a `number` that is a `safe integer`.\n\n> NOTE: returns boolean.\n\n> NOTE: JavaScript can only safely represent integers i in the range −2<sup>53</sup> < i < 2<sup>53</sup>. In the range (−2<sup>53</sup>, 2<sup>53</sup>) (excluding the lower and upper bounds), JavaScript integers are **safe**:\n\n## Syntax\n\n```js\nNumber.isSafeInteger(value);\n```\n\n## Usage examples\n\n```js\nNumber.isSafeInteger(3); // -> true\nNumber.isSafeInteger(Math.pow(2, 53)); // -> false\nNumber.isSafeInteger(Math.pow(2, 53) - 1); // -> true\nNumber.isSafeInteger(NaN); // -> false\nNumber.isSafeInteger(Infinity); // -> false\nNumber.isSafeInteger('3'); // -> false\nNumber.isSafeInteger(3.1); // -> false\nNumber.isSafeInteger(3.0); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger)\n",
    "category": "methods",
    "name": "isSafeInteger",
    "path": "/docs/Number/isSafeInteger",
    "searchString": "Number.isSafeInteger"
  },
  {
    "body": "# Number.parseFloat()\n\nThe **`parseFloat`** method parses a `string` argument and returns a `floating point number`.\n\n## Syntax\n\n```js\nconst number = Number.isSafeInteger(value);\n```\n\n## Usage examples\n\n```js\nNumber.parseFloat('1.23'); // -> 1.23\nNumber.parseFloat('1.23abc'); // -> 1.23\nNumber.parseFloat('1'); // -> 1\nNumber.parseFloat('123e-3'); // -> 0.123\nNumber.parseFloat(Infinity); // -> Infinity\n\n// These all return NaN:\nNumber.parseFloat('abc1.23abc');\nNumber.parseFloat('abc1.23');\nNumber.parseFloat(undefined);\nNumber.parseFloat(true);\nNumber.parseFloat(null);\nNumber.parseFloat([]);\nNumber.parseFloat({});\nNumber.parseFloat('');\nNumber.parseFloat(' ');\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat)\n",
    "category": "methods",
    "name": "parseFloat",
    "path": "/docs/Number/parseFloat",
    "searchString": "Number.parseFloat"
  },
  {
    "body": "# Number.parseInt()\n\nThe **`parseInt`** method parses a `string` argument and returns an `integer`.\n\n## Syntax\n\n```js\nconst integer = Number.parseInt(string, radix);\n```\n\n> NOTE: The radix is the number of unique digits, including the digit zero, used to represent numbers in a positional numeral system. For example, for the decimal/denary system the radix is ten, because it uses the ten digits from 0 through 9.\n\n## Usage examples\n\n```js\nparseInt(4.7, 10); // -> 4\nparseInt(4.7); // -> 4\nparseInt(' 0xF', 16); // -> 15\nparseInt('Not really a number'); // -> NaN\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n",
    "category": "methods",
    "name": "parseInt",
    "path": "/docs/Number/parseInt",
    "searchString": "Number.parseInt"
  },
  {
    "body": "# Number.prototype.toExponential()\n\nThe **`toExponential`** method returns a `string` representing the `number` in **exponential notation**.\n\n> NOTE: exponential notation is a way of expressing numbers that are too big or too small to be conveniently written in decimal form.\n\n## Syntax\n\n```js\nconst exponentialNotation = number.toExponential(fractionDigits);\n```\n\n> NOTE: fractionDigits is an optional parameter that represents the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.\n\n## Usage examples\n\n```js\n(99.89898989).toExponential(); // -> \"9.989898989e+1\"\n(77.1234).toExponential(2); // -> \"7.71e+1\"\n(77).toExponential(); // -> \"7.7e+1\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)\n",
    "category": "methods",
    "name": "toExponential",
    "path": "/docs/Number/toExponential",
    "searchString": "Number.prototype.toExponential"
  },
  {
    "body": "# Number.prototype.toFixed()\n\nThe **`toFixed`** method formats a `number` using fixed-point notation.\n\n> NOTE: returns string.\n\n## Syntax\n\n```js\nconst formattedString = number.toFixed(digits);\n```\n\n> NOTE: parameter digits represents number of digits after the decimal point.\n\n## Usage examples\n\n```js\n(666.6767678).toFixed();\n// -> \"667\"\n(666.6767678).toFixed(2);\n// ->\"666.68\"\n(1.23e20).toFixed(2);\n// -> '123000000000000000000.00'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)\n",
    "category": "methods",
    "name": "toFixed",
    "path": "/docs/Number/toFixed",
    "searchString": "Number.prototype.toFixed"
  },
  {
    "body": "# Number.prototype.toLocaleString()\n\nThe **`toLocaleString`** method returns a string with a language-sensitive representation of this number.\n\n## Syntax\n\n```js\nnumber.toLocaleString(locales, options)\n```\n\n## Usage examples\n\n```js\nconst number = 123456.789;\n// German uses comma as decimal separator and period for thousands\nconsole.log(number.toLocaleString('de-DE'));\n// -> 123.456,789\n\n// Arabic in most Arabic speaking countries uses Eastern Arabic digits\nconsole.log(number.toLocaleString('ar-EG'));\n// -> ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(number.toLocaleString('en-IN'));\n// -> 1,23,456.789\n\n// request a currency format\nconsole.log(number.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }));\n// -> 123.456,79 €\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString)\n",
    "category": "methods",
    "name": "toLocaleString",
    "path": "/docs/Number/toLocaleString",
    "searchString": "Number.prototype.toLocaleString"
  },
  {
    "body": "# Number.prototype.toPrecision()\n\nThe **`toPrecision`** method returns a string representing the `number` to the specified `precision`.\n\n## Syntax\n\n```js\nconst result = number.toPrecision(precision);\n```\n\n## Usage examples\n\n```js\n(5.123456).toPrecision();\n// -> \"5.123456\"\n(5.123456).toPrecision(2);\n// -> \"5.1\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)\n",
    "category": "methods",
    "name": "toPrecision",
    "path": "/docs/Number/toPrecision",
    "searchString": "Number.prototype.toPrecision"
  },
  {
    "body": "# Number.prototype.toString()\n\nThe **`toString()`** method returns a `string` representing the specified `number`.\n\n## Syntax\n\n```js\nconst string = number.toString(radix);\n```\n\n> NOTE: The radix is the number of unique digits, including the digit zero, used to represent numbers in a positional numeral system. For example, for the decimal/denary system the radix is ten, because it uses the ten digits from 0 through 9.\n\n## Usage examples\n\n```js\nconst number = 10;\nnumber.toString(); // -> '10'\nnumber.toString(2); // -> '1010'\n```\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)\n",
    "category": "methods",
    "name": "toString",
    "path": "/docs/Number/toString",
    "searchString": "Number.prototype.toString"
  },
  {
    "body": "# Number.prototype.valueOf()\n\nThe **`valueOf`** method returns the wrapped primitive `value` of a Number object.\n\n## Syntax\n\n```js\nconst value = number.valueOf();\n```\n\n## Usage examples\n\n```js\nconst numberObj = new Number(10);\ntypeof numberObj; // -> object\nnumberObj.valueOf(); // -> 10\n```\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf)\n",
    "category": "methods",
    "name": "valueOf",
    "path": "/docs/Number/valueOf",
    "searchString": "Number.prototype.valueOf"
  },
  {
    "body": "# String.fromCharCode()\n\nThe static **`fromCharCode`** method returns a `string` created from the specified sequence of UTF-16 code units (`numN`).\n\n## Syntax\n\n```js\nconst string = String.fromCharCode(num1, ..., numN);\n```\n\n## Usage examples\n\n```js\nString.fromCharCode(65, 66, 67); // -> \"ABC\"\nString.fromCharCode(0x2014); // -> \"—\"\nString.fromCharCode(0x12014); // -> \"—\" (the digit 1 is truncated and ignored)\nString.fromCharCode(8212); // -> \"—\" (8212 is the decimal form of 0x2014)\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\n",
    "category": "methods",
    "name": "fromCharCode",
    "path": "/docs/String/fromCharCode",
    "searchString": "String.fromCharCode"
  },
  {
    "body": "# String.fromCodePoint()\n\nThe static **`fromCodePoint`** method returns a `string` created by using the specified sequence of code points (`numN`).\n\n## Syntax\n\n```js\nconst string = String.fromCodePoint(num1, ..., numN);\n```\n\n## Usage examples\n\n```js\nString.fromCodePoint(0x1d306, 0x61, 0x1d307); // -> \"\\uD834\\uDF06a\\uD834\\uDF07\"\nString.fromCodePoint('_'); // -> RangeError\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n",
    "category": "methods",
    "name": "fromCodePoint",
    "path": "/docs/String/fromCodePoint",
    "searchString": "String.fromCodePoint"
  },
  {
    "body": "# String.raw()\n\nThe static **`raw`** method is a tag function of **template literals**, which is used to get the `raw string` form of `template strings`, that is, substitutions (e.g. \\${foo}) are processed, but escapes (e.g. \\n) are not.\n\n## Syntax\n\n```js\nString.raw`templateString`;\nString.raw(callSite, ...substitutions);\n```\n\n## Usage examples\n\n```js\nString.raw`Hi\\n${2 + 3}!`; // -> 'Hi\\n5!'\n\nlet name = 'Bob';\nString.raw`Hi\\n${name}!`; // -> 'Hi\\nBob!'\n\nString.raw({ raw: ['foo', 'bar', 'baz'] }, 2 + 3, 'Java' + 'Script'); // -> 'foo5barJavaScriptbaz'\nString.raw({ raw: 'test' }, 0, 1, 2); // -> 't0e1s2t'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw)\n",
    "category": "methods",
    "name": "raw",
    "path": "/docs/String/raw",
    "searchString": "String.raw"
  },
  {
    "body": "# String.prototype.charAt()\n\nThe **`charAt`** method returns a new string consisting of the single UTF-16 code `character` located at the specified offset into the `string` specified by `index`.\n\n## Syntax\n\n```js\nconst character = string.charAt(index);\n```\n\n## Usage examples\n\n```js\nvar string = 'Brave new world';\nstring.charAt(); // -> 'B'\nstring.charAt(0); // -> 'B'\nstring.charAt(1); // -> 'r'\nstring.charAt(2); // -> 'a'\nstring.charAt(3); // -> 'v'\nstring.charAt(4); // -> 'e'\nstring.charAt(999); // -> ''\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\n",
    "category": "methods",
    "name": "charAt",
    "path": "/docs/String/charAt",
    "searchString": "String.prototype.charAt"
  },
  {
    "body": "# String.prototype.charCodeAt()\n\nThe **`charCodeAt`** method returns an `integer` between **0** and **65535** representing the UTF-16 code unit at the given `index` of a `string`.\n\n## Syntax\n\n```js\nconst integer = string.charCodeAt(index);\n```\n\n## Usage examples\n\n```js\n'ABC'.charCodeAt(0); // -> 65\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n",
    "category": "methods",
    "name": "charCodeAt",
    "path": "/docs/String/charCodeAt",
    "searchString": "String.prototype.charCodeAt"
  },
  {
    "body": "# String.prototype.codePointAt()\n\nThe **`codePointAt`** method returns a non-negative `integer` that is the Unicode code point value.\n\n## Syntax\n\n```js\nconst integer = string.codePointAt(index);\n```\n\n## Usage examples\n\n```js\n'ABC'.codePointAt(1); // -> 66\n'\\uD800\\uDC00'.codePointAt(0); // -> 65536\n\n'XYZ'.codePointAt(42); // -> undefined\n\nfor (let codePoint of '\\ud83d\\udc0e\\ud83d\\udc71\\u2764') {\n  console.log(codePoint.codePointAt(0).toString(16));\n} // -> '1f40e', '1f471', '2764'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\n",
    "category": "methods",
    "name": "codePointAt",
    "path": "/docs/String/codePointAt",
    "searchString": "String.prototype.codePointAt"
  },
  {
    "body": "# String.prototype.concat()\n\nThe **`concat`** method concatenates the `stringN` arguments to a given `string` and returns a `new string`.\n\n## Syntax\n\n```js\nconst newString = string.concat(string1, ..., stringN);\n```\n\n## Usage examples\n\n```js\n'Hello, '.concat('Kevin', '. Have a nice day.'); // -> Hello, Kevin. Have a nice day.\n''.concat(...['Hello', ' ', 'Venkat', '!']); // -> \"Hello Venkat!\"\n''.concat({}); // -> [object Object]\n''.concat([]); // -> \"\"\n''.concat(null); // -> \"null\"\n''.concat(true); // -> \"true\"\n''.concat(4, 5); // -> \"45\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\n",
    "category": "methods",
    "name": "concat",
    "path": "/docs/String/concat",
    "searchString": "String.prototype.concat"
  },
  {
    "body": "# String.prototype.endsWith()\n\nThe **`endsWith`** method determines whether a `string` ends with the characters of a specified `search string`, returning a `boolean` value as a `result`.\n\n## Syntax\n\n```js\nconst result = string.endsWith(searchString, length);\n```\n\n## Usage examples\n\n```js\nvar string = 'To be, or not to be, that is the question.';\n\nstring.endsWith('.'); // -> true\nstring.endsWith('question.'); // -> true\nstring.endsWith('to be'); // -> false\nstring.endsWith('to be', 19); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\n",
    "category": "methods",
    "name": "endsWith",
    "path": "/docs/String/endsWith",
    "searchString": "String.prototype.endsWith"
  },
  {
    "body": "# String.prototype.includes()\n\nThe **`includes`** method determines whether `searchString` may be found within a `string`, returning a `boolean` value as a `result`.\n\n## Syntax\n\n```js\nconst result = string.includes(searchString, position);\n```\n\n## Usage examples\n\n```js\nconst string = 'To be, or not to be, that is the question.';\n\nstring.includes('To be'); // -> true\nstring.includes('To be', 1); // -> false\nstring.includes('question'); // -> true\nstring.includes('nonexistent'); // -> false\nstring.includes('TO BE'); // -> false\nstring.includes(''); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\n",
    "category": "methods",
    "name": "includes",
    "path": "/docs/String/includes",
    "searchString": "String.prototype.includes"
  },
  {
    "body": "# String.prototype.indexOf()\n\n**The `indexOf` method returns the `index` of the first occurrence of the specified `searchValue` within a `string`**, starting the search at `fromIndex`. It returns **-1** if the `searchValue` is not found.\n\n## Syntax\n\n```js\nconst index = string.indexOf(searchValue, fromIndex);\n```\n\n## Usage examples\n\n```js\nconst string = 'Brave new world';\nstring.indexOf('w'); // -> 8\nstring.indexOf('new'); // -> 6\nstring.indexOf('New'); // -> -1\nstring.indexOf(''); // -> 0\nstring.indexOf('', 10); // -> 10\nstring.indexOf('', 999); // -> 15\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\n",
    "category": "methods",
    "name": "indexOf",
    "path": "/docs/String/indexOf",
    "searchString": "String.prototype.indexOf"
  },
  {
    "body": "# String.prototype.lastIndexOf()\n\nThe **`lastIndexOf`** method returns the `index` of the last occurrence of the specified `searchValue` within a `string`, searching backwards from `fromIndex`. It returns **-1** if the `searchValue` is not found.\n\n## Syntax\n\n```js\nconst index = string.lastIndexOf(searchValue, fromIndex);\n```\n\n## Usage examples\n\n```js\nconst string = 'Brave new world';\nstring.indexOf('w'); // -> 8\nstring.lastIndexOf('w'); // -> 10\nstring.indexOf('new'); // -> 6\nstring.lastIndexOf('new'); // -> 6\nstring.lastIndexOf(''); // -> 15\nstring.lastIndexOf('', 5); // -> 5\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\n",
    "category": "methods",
    "name": "lastIndexOf",
    "path": "/docs/String/lastIndexOf",
    "searchString": "String.prototype.lastIndexOf"
  },
  {
    "body": "# String.prototype.localeCompare()\n\nThe **`localeCompare`** method returns a number indicating whether a `reference string` comes before or after or is the same as the `compare string` in sort order.\n\n## Syntax\n\n```js\nconst number = referenceString.localeCompare(compareString, locales, options);\n```\n\nSee more info on `locales` and `options` parameters at [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Parameters).\n\n## Usage examples\n\n<!-- prettier-ignore-start -->\n```js\n'a'.localeCompare('a'); // -> 0\n'a'.localeCompare('c'); // -> -1\n'check'.localeCompare('against'); // -> 1\n\n['réservé', 'Premier', 'Cliché', 'communiqué', 'café', 'Adieu'].sort(\n  (a, b) => a.localeCompare(b, 'fr', { ignorePunctuation: true })\n); // -> ['Adieu', 'café', 'Cliché', 'communiqué', 'Premier', 'réservé']\n```\n<!-- prettier-ignore-end -->\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)\n",
    "category": "methods",
    "name": "localeCompare",
    "path": "/docs/String/localeCompare",
    "searchString": "String.prototype.localeCompare"
  },
  {
    "body": "# String.prototype.match()\n\nThe **`match`** method retrieves the result of matching a `string` against a `regular expression`.\n\n## Syntax\n\n```js\nconst result = string.match(regexp);\n```\n\n## Usage examples\n\n```js\n'aaa'.match(/b/); // -> null\n```\n\n```js\nconst string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nconst regexp = /[A-E]/gi;\nstring.match(regexp); // -> ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']\n```\n\n```js\nconst string = 'For more information, see Chapter 3.4.5.1';\nconst regexp = /see (chapter \\d+(\\.\\d)*)/i;\nstring.match(regexp); // -> // [\n//  'see Chapter 3.4.5.1',\n//  'Chapter 3.4.5.1', '.1',\n//  index: 22,\n//  input: 'For more information, see Chapter 3.4.5.1'\n// ]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n",
    "category": "methods",
    "name": "match",
    "path": "/docs/String/match",
    "searchString": "String.prototype.match"
  },
  {
    "body": "# String.prototype.matchAll()\n\nThe **`matchAll`** method returns an `iterator` of all results matching a `string` against a `regular expression`, including capturing groups.\n\n## Syntax\n\n```js\nconst iterator = string.matchAll(regexp);\n```\n\n## Usage examples\n\n```js\nconst regexp = RegExp('foo[a-z]*', 'g');\nconst string = 'table football, foosball';\n\nconst matches = string.matchAll(regexp);\nfor (const match of matches) {\n  console.log(\n    `Found ${match[0]} start=${match.index} end=${match.index +\n      match[0].length}.`,\n  );\n}\n// -> \"Found football start=6 end=14.\"\n// -> \"Found foosball start=16 end=24.\"\n\nArray.from(string.matchAll(regexp), m => m[0]); // -> [ \"football\", \"foosball\"]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)\n",
    "category": "methods",
    "name": "matchAll",
    "path": "/docs/String/matchAll",
    "searchString": "String.prototype.matchAll"
  },
  {
    "body": "# String.prototype.normalize()\n\nThe **`normalize`** method returns the Unicode Normalization Form of a given `string`. If the value isn't a string, it will be converted to one first.\n\nThe `form` argument is one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. If omitted or undefined, \"NFC\" is used.\n\nSee more details at [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize#Parameters)\n\n## Syntax\n\n```js\nconst normalizedForm = string.normalize(form);\n```\n\n## Usage examples\n\n```js\n// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n// U+0323: COMBINING DOT BELOW\nconst str = '\\u1E9B\\u0323';\nstr.normalize(); // -> '\\u1E9B\\u0323'\nstr.normalize('NFC'); // -> '\\u1E9B\\u0323'\nstr.normalize('NFD'); // -> '\\u017F\\u0323\\u0307'\nstr.normalize('NFKC'); // -> '\\u1E69'\nstr.normalize('NFKD'); // -> '\\u0073\\u0323\\u0307'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n",
    "category": "methods",
    "name": "normalize",
    "path": "/docs/String/normalize",
    "searchString": "String.prototype.normalize"
  },
  {
    "body": "# String.prototype.padEnd()\n\nThe **`padEnd`** method pads the current `string` with a given `padding string` so that the resulting `padded string` reaches a given `target length`.\n\nThe padding is applied from the end of the current string. The `padding string` is repeated, if needed.\n\n## Syntax\n\n```js\nconst paddedString = string.padEnd(targetLength, paddingString);\n```\n\n## Usage examples\n\n```js\n'abc'.padEnd(10); // -> \"abc       \"\n'abc'.padEnd(10, 'foo'); // -> \"abcfoofoof\"\n'abc'.padEnd(6, '123456'); // -> \"abc123\"\n'abc'.padEnd(1); // -> \"abc\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd)\n",
    "category": "methods",
    "name": "padEnd",
    "path": "/docs/String/padEnd",
    "searchString": "String.prototype.padEnd"
  },
  {
    "body": "# String.prototype.padStart()\n\nThe **`padStart`** method pads a given `string` with a `padding string` until the resulting string reaches the `target length`.\nThe padding is applied from the start of a given `string`. The `padding string` is repeated is needed.\n\n## Syntax\n\n```js\nconst paddedString = string.padStart(targetLength, paddingString);\n```\n\n## Usage examples\n\n```js\n'abc'.padStart(10); // -> \"       abc\"\n'abc'.padStart(10, 'foo'); // -> \"foofoofabc\"\n'abc'.padStart(6, '123465'); // -> \"123abc\"\n'abc'.padStart(8, '0'); // -> \"00000abc\"\n'abc'.padStart(1); // -> \"abc\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart)\n",
    "category": "methods",
    "name": "padStart",
    "path": "/docs/String/padStart",
    "searchString": "String.prototype.padStart"
  },
  {
    "body": "# String.prototype.repeat()\n\nThe **`repeat`** method returns a `new string` which contains the specified `number` of copies of the `string` on which it was called, concatenated together.\n\n## Syntax\n\n```js\nconst newString = string.repeat(count);\n```\n\n## Usage examples\n\n```js\n'abc'.repeat(0); // -> ''\n'abc'.repeat(1); // -> 'abc'\n'abc'.repeat(2); // -> 'abcabc'\n'abc'.repeat(3.5); // -> 'abcabcabc'\n'abc'.repeat(1 / 0); // -> RangeError\n'abc'.repeat(-1); // -> RangeError\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat);\n",
    "category": "methods",
    "name": "repeat",
    "path": "/docs/String/repeat",
    "searchString": "String.prototype.repeat"
  },
  {
    "body": "# String.prototype.replace()\n\nThe **`replace`** method returns a `new string` with some or all matches of a `pattern` replaced by a `replacement`. The `pattern` can be a `string` or a `RegExp`, and the replacement can be a `string` or a `function` to be called for each match.\nIf pattern is a `string`, **only the first** occurrence will be replaced.\n\n## Syntax\n\n```js\nvar newString = string.replace(regexp|substring, newSubstring|function);\n```\n\n## Usage examples\n\n```js\n'Twas the night before Xmas...'.replace(/xmas/i, 'Christmas'); // -> Twas the night before Christmas...\n\n'Apples are round, and apples are juicy.'.replace(/apples/gi, 'oranges'); // -> oranges are round, and oranges are juicy.\n\n'abc12345#$*%'.replace(\n  /([^\\d]*)(\\d*)([^\\w]*)/,\n  (match, p1, p2, p3, offset, string) => [p1, p2, p3].join(' - '),\n); // -> abc - 12345 - #$*%\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n",
    "category": "methods",
    "name": "replace",
    "path": "/docs/String/replace",
    "searchString": "String.prototype.replace"
  },
  {
    "body": "# String.prototype.search()\n\nThe **`search`** method executes a search for a match between a `regular expression` and a `given string` and returns an `index` of the first match.\n\n## Syntax\n\n```js\nconst resultIndex = string.search(regexp);\n```\n\n## Usage examples\n\n```js\nconst string = 'hey JudE';\nstring.search(/[A-Z]/g); // -> 4\nstring.search(/[.]/g); // -> -1\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\n",
    "category": "methods",
    "name": "search",
    "path": "/docs/String/search",
    "searchString": "String.prototype.search"
  },
  {
    "body": "# String.prototype.slice()\n\nThe **`slice`** method extracts a `section` of a `string`, using `begin` and `end` indexes.\n\n## Syntax\n\n```js\nconst section = string.slice(beginIndex, endIndex);\n```\n\n## Usage examples\n\n```js\nconst string = 'The morning is upon us.';\nstring.slice(1, 8); // -> \"he morn\"\nstring.slice(4, -2); // -> \"morning is upon u\"\nstring.slice(12); // -> \"is upon us.\"\nstring.slice(30); // -> \"\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)\n",
    "category": "methods",
    "name": "slice",
    "path": "/docs/String/slice",
    "searchString": "String.prototype.slice"
  },
  {
    "body": "# String.prototype.split()\n\nThe **`split`** method turns a `string` into an `array of strings`, by separating the `string` at each instance of a specified `separator string`. You can `limit` the number of splits using additional argument.\n\n## Syntax\n\n```js\nconst arrayOfStrings = string.split(separator, limit);\n```\n\n## Usage examples\n\n```js\n''.split(); // -> ['']\n'Hello World!'.split(); // -> ['Hello World!']\n'Hello World!'.split(''); // -> [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n'Hello World!'.split(' '); // -> [\"Hello\", \"World!\"]\n'Hello World!'.split('e'); // ->  [\"H\", \"llo World!\"]\n'Hello World. How are you doing?'.split(' ', 3); // -> [\"Hello\", \"World.\", \"How\"]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n",
    "category": "methods",
    "name": "split",
    "path": "/docs/String/split",
    "searchString": "String.prototype.split"
  },
  {
    "body": "# String.prototype.startsWith()\n\nThe **`startsWith`** method determines whether a `string` begins with the characters of a `search string`, returning a `boolean` value as a result.\n\n## Syntax\n\n```js\nconst starts = string.startsWith(searchString, position);\n```\n\n## Usage examples\n\n```js\nconst string = 'To be, or not to be, that is the question.';\nstring.startsWith('To be'); // -> true\nstring.startsWith('not to be'); // -> false\nstring.startsWith('not to be', 10); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\n",
    "category": "methods",
    "name": "startsWith",
    "path": "/docs/String/startsWith",
    "searchString": "String.prototype.startsWith"
  },
  {
    "body": "# String.prototype.substr()\n\n```warning\nWarning: Although `String.prototype.substr()` is not strictly deprecated (as in \"removed from the Web standards\"), it is considered a legacy function and should be avoided when possible. It is not part of the core JavaScript language and may be removed in the future. If at all possible, use the `substring()` method instead.\n```\n\nThe **`substr`** method returns a portion of the `string`, starting at the specified `index` and extending for a given `number` of characters afterward.\n\n## Syntax\n\n```js\nconst substring = string.substr(start, length);\n```\n\n## Usage examples\n\n```js\nconst string = 'Mozilla';\nstring.substr(0, 1); // -> 'M'\nstring.substr(1, 0); // -> ''\nstring.substr(-1, 1); // -> 'a'\nstring.substr(1, -1); // -> ''\nstring.substr(-3); // -> 'lla'\nstring.substr(1); // -> 'ozilla'\nstring.substr(-20, 2); // -> 'Mo'\nstring.substr(20, 2); // -> ''\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\n",
    "category": "methods",
    "name": "substr",
    "path": "/docs/String/substr",
    "searchString": "String.prototype.substr"
  },
  {
    "body": "# String.prototype.substring()\n\nThe **`substring`** method returns the part of the `string` between the `start` and `end` indexes, or to the end of the string.\n\n## Syntax\n\n```js\nconst substring = string.substring(startIndex, endIndex);\n```\n\n## Usage examples\n\n```js\nconst string = 'Mozilla';\nstring.substring(2); // -> \"zilla\"\nstring.substring(2, 5); // -> \"zil\"\nstring.substring(5, 2); // -> \"zil\"\nstring.substring(string.length - 4); // -> 'illa'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring)\n",
    "category": "methods",
    "name": "substring",
    "path": "/docs/String/substring",
    "searchString": "String.prototype.substring"
  },
  {
    "body": "# String.prototype.toLocaleLowerCase()\n\nThe **`toLocaleLowerCase`** method returns the `string` converted to lower case, according to any locale-specific case mappings.\n\n## Syntax\n\n```js\nconst lowerString = string.toLocaleLowerCase()\nconst lowerString = string.toLocaleLowerCase(locale)\nconst lowerString = string.toLocaleLowerCase([locale1, ..., localeN])\n```\n\n## Usage examples\n\n```js\n'ALPHABET'.toLocaleLowerCase(); // 'alphabet'\n\n'\\u0130'.toLocaleLowerCase('tr') === 'i'; // -> true\n'\\u0130'.toLocaleLowerCase('en-US') === 'i'; // -> false\n\nlet locales = ['tr', 'TR', 'tr-TR', 'tr-u-co-search', 'tr-x-turkish'];\n'\\u0130'.toLocaleLowerCase(locales) === 'i'; // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\n",
    "category": "methods",
    "name": "toLocaleLowerCase",
    "path": "/docs/String/toLocaleLowerCase",
    "searchString": "String.prototype.toLocaleLowerCase"
  },
  {
    "body": "# String.prototype.toLocaleUpperCase()\n\nThe **`toLocaleUpperCase`** method returns the `string` converted to upper case, according to any locale-specific case mappings.\n\n## Syntax\n\n```js\nconst lowerString = string.toLocaleUpperCase();\nconst lowerString = string.toLocaleUpperCase(locale);\nconst lowerString = string.toLocaleUpperCase(locale1, ..., localeN);\n```\n\n## Usage examples\n\n```js\n'alphabet'.toLocaleUpperCase(); // -> 'ALPHABET'\n\n'Gesäß'.toLocaleUpperCase(); // -> 'GESÄSS'\n\n'i\\u0307'.toLocaleUpperCase('lt-LT'); // -> 'I'\n\nlet locales = ['lt', 'LT', 'lt-LT', 'lt-u-co-phonebk', 'lt-x-lietuva'];\n'i\\u0307'.toLocaleUpperCase(locales); // -> 'I'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\n",
    "category": "methods",
    "name": "toLocaleUpperCase",
    "path": "/docs/String/toLocaleUpperCase",
    "searchString": "String.prototype.toLocaleUpperCase"
  },
  {
    "body": "# String.prototype.toLowerCase()\n\nThe **`toLowerCase`** method returns the `string` converted to lower case.\n\n## Syntax\n\n```js\nconst lowerString = string.toLowerCase();\n```\n\n## Usage examples\n\n```js\n'ALPHABET'.toLowerCase(); // -> 'alphabet'\n'Alphabet'.toLowerCase(); // -> 'alphabet'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n",
    "category": "methods",
    "name": "toLowerCase",
    "path": "/docs/String/toLowerCase",
    "searchString": "String.prototype.toLowerCase"
  },
  {
    "body": "# String.prototype.toString()\n\nThe **`toString`** method returns a _string primitive_ representing the specified _`String` object_.\n\nThe `String` object overrides the **`toString()`** method of the `Object` object; it does not inherit `Object.prototype.toString()`. For `String` objects, the **`toString()`** method returns a string representation of the object and is the same as the `String.prototype.valueOf()` method.\n\n## Syntax\n\n```js\nconst stringPrimitive = stringObject.toString();\n```\n\n## Usage examples\n\n```js\nnew String('Hello world').toString(); // -> 'Hello world'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString)\n",
    "category": "methods",
    "name": "toString",
    "path": "/docs/String/toString",
    "searchString": "String.prototype.toString"
  },
  {
    "body": "# String.prototype.toUpperCase()\n\nThe **`toUpperCase`** method returns the `string` converted to uppercase.\n\n## Syntax\n\n```js\nconst lowerString = string.toUpperCase();\n```\n\n## Usage examples\n\n```js\n'alphabet'.toUpperCase(); // -> 'ALPHABET'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\n",
    "category": "methods",
    "name": "toUpperCase",
    "path": "/docs/String/toUpperCase",
    "searchString": "String.prototype.toUpperCase"
  },
  {
    "body": "# String.prototype.trim()\n\nThe **`trim`** method removes whitespace from both ends of a `string`. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).\n\n## Syntax\n\n```js\nconst trimmedString = string.trim();\n```\n\n## Usage examples\n\n```js\n'   foo baz  '.trim(); // -> 'foo baz'\n'foo baz    '.trim(); // -> 'foo baz'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)\n",
    "category": "methods",
    "name": "trim",
    "path": "/docs/String/trim",
    "searchString": "String.prototype.trim"
  },
  {
    "body": "# String.prototype.trimRight()\n\nThe **`trimEnd`** method removes whitespace from the end of a `string`.\n`trimRight` is an alias of this method.\n\n## Syntax\n\n```js\nconst trimmedString = string.trimEnd();\nconst trimmedString = string.trimRight();\n```\n\n## Usage examples\n\n```js\n'   foo baz  '.trimRight(); // -> '   foo baz'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight)\n",
    "category": "methods",
    "name": "trimEnd",
    "path": "/docs/String/trimEnd",
    "searchString": "String.prototype.trimEnd"
  },
  {
    "body": "# String.prototype.trimLeft()\n\nThe **`trimStart`** method removes whitespace from the beginning of a `string`.\n`trimLeft` is an alias of this method.\n\n## Syntax\n\n```js\nconst trimmed = string.trimStart();\nconst trimmed = string.trimLeft();\n```\n\n## Usage examples\n\n```js\n'   foo baz  '.trimLeft(); // -> 'foo baz  '\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft)\n",
    "category": "methods",
    "name": "trimLeft",
    "path": "/docs/String/trimLeft",
    "searchString": "String.prototype.trimLeft"
  },
  {
    "body": "# String.prototype.trimRight()\n\nThe **`trimEnd`** method removes whitespace from the end of a `string`.\n`trimRight` is an alias of this method.\n\n## Syntax\n\n```js\nconst trimmedString = string.trimEnd();\nconst trimmedString = string.trimRight();\n```\n\n## Usage examples\n\n```js\n'   foo baz  '.trimRight(); // -> '   foo baz'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight)\n",
    "category": "methods",
    "name": "trimRight",
    "path": "/docs/String/trimRight",
    "searchString": "String.prototype.trimRight"
  },
  {
    "body": "# String.prototype.trimLeft()\n\nThe **`trimStart`** method removes whitespace from the beginning of a `string`.\n`trimLeft` is an alias of this method.\n\n## Syntax\n\n```js\nconst trimmed = string.trimStart();\nconst trimmed = string.trimLeft();\n```\n\n## Usage examples\n\n```js\n'   foo baz  '.trimLeft(); // -> 'foo baz  '\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft)\n",
    "category": "methods",
    "name": "trimStart",
    "path": "/docs/String/trimStart",
    "searchString": "String.prototype.trimStart"
  },
  {
    "body": "# String.prototype.valueOf()\n\nThe **`valueOf`** method returns the primitive value of a String object.\n\n## Syntax\n\n```js\nstr.valueOf()\n```\n\n## Usage examples\n\n```js\nvar x = new String('Hello world');\nconsole.log(x.valueOf()); // -> Displays 'Hello world'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf)\n",
    "category": "methods",
    "name": "valueOf",
    "path": "/docs/String/valueOf",
    "searchString": "String.prototype.valueOf"
  },
  {
    "body": "# Function.prototype.apply()\n\nThe **`apply`** method calls a `function` with a given `this` value, and `arguments` provided as an **array** (or an [array-like](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects) object).\n\n## Syntax\n\n```js\nfunction.apply(thisArgument, argumentsArray);\n```\n\n## Usage examples\n\n```js\nMath.max.apply(null, [1, 2, 3, 4]); // -> 4\n\nconst array = ['a', 'b'];\nconst elements = [0, 1, 2];\narray.push.apply(array, elements); // -> // [\"a\", \"b\", 0, 1, 2]\n\nconst greet = (...names) => {\n  return `${this.greeting}, ${names.join(' and ')}!`;\n};\ngreet.apply({ greeting: 'Howdy!' }, ['John', 'Maria']); // -> 'Howdy, John and Maria!'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n",
    "category": "methods",
    "name": "apply",
    "path": "/docs/Function/apply",
    "searchString": "Function.prototype.apply"
  },
  {
    "body": "# Function.prototype.bind()\n\nThe **`bind`** method creates a _new_ `function` that, when called, has its `this` keyword set to the provided `value`, with a given sequence of `arguments` preceding any provided when the _new_ `function` is called.\n\n## Syntax\n\n```js\nconst newFunction = function.bind(thisArgument, argument1, ..., argumentN);\n```\n\n## Usage examples\n\n```js\nconst module = {\n  number: 81,\n  readNumber() {\n    return this.number;\n  },\n};\nconst readNumber = module.readNumber;\nconst boundReadNumber = readNumber.bind(module);\n\nmodule.readNumber(); // -> 81\nreadNumber(); // -> undefined\nboundReadNumber(); // -> 81\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n",
    "category": "methods",
    "name": "bind",
    "path": "/docs/Function/bind",
    "searchString": "Function.prototype.bind"
  },
  {
    "body": "# Function.prototype.call()\n\nThe **`call`** method calls a `function` with a given `this` value and `arguments` provided individually.\n\n## Syntax\n\n```js\nfunction.call(thisArgument, argument1, ..., argumentN);\n```\n\n## Usage examples\n\n```js\nconst greet = (...names) => {\n  return `${this.greeting}, ${names.join(' and ')}!`;\n};\ngreet.call({ greeting: 'Howdy!' }, 'John', 'Maria'); // -> 'Howdy, John and Maria!'\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n",
    "category": "methods",
    "name": "call",
    "path": "/docs/Function/call",
    "searchString": "Function.prototype.call"
  },
  {
    "body": "# Function.prototype.toString()\n\nThe **`toString`** method returns a `string` representing the source code of the `function`.\n\n## Syntax\n\n```js\nfunction.toString();\n```\n\n## Usages examples\n\n```js\nfunction sum(a, b) {\n  return a + b;\n}\nsum.toString(); // -> \"function sum(a, b) { return a + b; }\"\nMath.abs.toString(); // -> \"function abs() { [native code] }\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString)\n",
    "category": "methods",
    "name": "toString",
    "path": "/docs/Function/toString",
    "searchString": "Function.prototype.toString"
  },
  {
    "body": "# Function.prototype.length\n\nThe **`length`** property indicates the `number` of `parameters` expected by the `function`.\n\n## Usage example\n\n```js\nfunction func1() {}\nfunction func2(a, b) {}\n\nfunc1.length; // -> 0\nfunc2.length; // -> 2\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n",
    "category": "methods",
    "name": "length",
    "path": "/docs/Function/length",
    "searchString": "Function.length"
  },
  {
    "body": "# Function.prototype.name\n\nA `Function` object's read-only `name` property indicates the function's name as specified when it was created, or it may be rather `anonymous` or `''` for functions created anonymously.\n\n## Usage examples\n\n```js\nconst func1 = function() {};\nconst object = {\n  func2: function() {},\n};\nconst func4 = function func3() {};\n\nfunc1.name; // -> \"func1\"\nobject.func2.name; // -> \"func2\"\nfunc4.name; // -> \"func3\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name)\n",
    "category": "methods",
    "name": "name",
    "path": "/docs/Function/name",
    "searchString": "Function.name"
  },
  {
    "body": "# RegExp.prototype.exec()\n\nThe **`exec`** method executes a search for a match in a `specified string`. Returns a result **array**, or **null**.\n\nIf your `regular expression` uses the \"g\" flag, you can use the **`exec`** method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of str specified by the regular expression's `lastIndex` property. The `lastIndex` property will not be reset when searching a different string, it will start its search at its existing `lastIndex`.\n\n## Syntax\n\n```js\nconst result = regex.exec(string);\n```\n\n## Usage examples\n\n```js\nconst regex = /quick\\s(brown).+?(jumps)/gi;\nconst string = 'The Quick Brown Fox Jumps Over The Lazy Dog';\nregex.exec(string);\n// ->\n// [\n//   0: \"Quick Brown Fox Jumps\",\n//   1: \"Brown\",\n//   2: \"Jumps\",\n//   index: 4,\n//   input: \"The Quick Brown Fox Jumps Over The Lazy Dog\",\n//   groups: undefined\n// ]\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)\n",
    "category": "methods",
    "name": "exec",
    "path": "/docs/RegExp/exec",
    "searchString": "RegExp.prototype.exec"
  },
  {
    "body": "# RegExp.prototype.test()\n\nThe **`test`** method executes a search for a match between a `regular expression` and a `specified string`. Returns **true** or **false**.\n\n## Syntax\n\n```js\nconst result = regex.test(string);\n```\n\n## Usage examples\n\n```js\n/^hello/.test('hello world!'); // -> true\n/^hello/.test('bye world!'); // -> false\n```\n\n### Last index\n\nIf the `regex` has the global flag set, **`test`** will advance the `lastIndex` of the `regex`. A subsequent use of **`test`** will start the search at the substring of str specified by `lastIndex`. It is worth noting that the `lastIndex` will not reset when testing a different string.\n\nThe following example demonstrates this behaviour:\n\n```js\nconst regex = /foo/g;\nregex.test('foo'); // true\nregex.test('foo'); // false\nregex.test('barfoo'); // true\n\n/foo/g.test('foo'); // -> true\n/foo/g.test('foo'); // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)\n",
    "category": "methods",
    "name": "test",
    "path": "/docs/RegExp/test",
    "searchString": "RegExp.prototype.test"
  },
  {
    "body": "# Regexp.prototype.toString()\n\nThe **`toString`** method returns a `string` representing the `regular expression`.\n\n## Syntax\n\n```js\nconst string = regex.toString();\n```\n\n## Usage examples\n\n```js\nnew RegExp('a+b+c').toString(); // -> /a+b+c/\nnew RegExp('bar', 'g').toString(); // -> /bar/g\nnew RegExp('\\n').toString(); // -> '/\\\\n/'\nnew RegExp('\\n').toString(); // -> '/\\n/' (prior to ES5)\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString)\n",
    "category": "methods",
    "name": "toString",
    "path": "/docs/RegExp/toString",
    "searchString": "RegExp.prototype.toString"
  },
  {
    "body": "# RegExp.prototype.dotAll\n\nThe **`dotAll`** property indicates whether or not the **\"s\"** flag is used with the regular expression. **`dotAll`** is a read-only property of an individual regular expression instance.\n\n## Usage examples\n\n```js\nnew RegExp('foobar', 's').dotAll; // -> true\n/foobar/gi.dotAll; // -> false\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll)\n",
    "category": "methods",
    "name": "dotAll",
    "path": "/docs/RegExp/dotAll",
    "searchString": "RegExp.prototype.dotAll"
  },
  {
    "body": "# RegExp.prototype.flags\n\nThe **`flags`** property returns a `string` consisting of the flags of the current `regular expression`.\n\n## Usage examples\n\n```js\nnew RegExp('foo', 'gi').flags; // \"gi\"\n/bar/muy.flags; // \"muy\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags)\n",
    "category": "methods",
    "name": "flags",
    "path": "/docs/RegExp/flags",
    "searchString": "RegExp.prototype.flags"
  },
  {
    "body": "# RegExp.prototype.global\n\nThe **`global`** property indicates whether or not the **\"g\"** flag is used with the `regular expression`. **`global`** is a read-only property of an individual regular expression instance.\n\n## Usage examples\n\n```js\n/foo/g.global; // -> true\n/foo/i.global; // -> false\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global)\n",
    "category": "methods",
    "name": "global",
    "path": "/docs/RegExp/global",
    "searchString": "RegExp.prototype.global"
  },
  {
    "body": "# RegExp.prototype.ignoreCase\n\nThe **`ignoreCase`** property indicates whether or not the **\"i\"** flag is used with the `regular expression`. **`ignoreCase`** is a read-only property of an individual regular expression instance.\n\n## Usage examples\n\n```js\n/foo/g.ignoreCase; // -> false\n/foo/i.ignoreCase; // -> true\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase)\n",
    "category": "methods",
    "name": "ignoreCase",
    "path": "/docs/RegExp/ignoreCase",
    "searchString": "RegExp.prototype.ignoreCase"
  },
  {
    "body": "# RegExp.prototype.lastIndex\n\nThe **`lastIndex`** is a read/write integer property of `regular expression` instances that specifies the `index` at which to start the next match.\n\n## Usage examples\n\n```js\nconst regex = new RegExp('foo', 'g');\nconst string = 'table football, foosball';\n\nregex.test(string);\nregex.lastIndex; // -> 9\nregex.test(string);\nregex.lastIndex; // ->  19\n```\n",
    "category": "methods",
    "name": "lastIndex",
    "path": "/docs/RegExp/lastIndex",
    "searchString": "RegExp.prototype.lastIndex"
  },
  {
    "body": "# RegExp.prototype.multiline\n\nThe **`multiline`** property indicates whether or not the **\"m\"** flag is used with the `regular expression`. **`multiline`** is a read-only property of an individual regular expression instance.\n\n## Usage examples\n\n```js\n/foo/m.multiline; // -> true\n/foo/im.multiline; // -> true\n/foo/i.multiline; // -> false\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline)\n",
    "category": "methods",
    "name": "multiline",
    "path": "/docs/RegExp/multiline",
    "searchString": "RegExp.prototype.multiline"
  },
  {
    "body": "# RegExp.prototype.source\n\nThe **`source`** property returns a `string` containing the source text of the `regexp` object, and it doesn't contain the two forward slashes on both sides and any flags.\n\n## Usage examples\n\n```js\n/fooBar/gi.source; // -> \"fooBar\"\nnew RegExp().source; // -> \"(?:)\"\nnew RegExp('\\n').source; // -> \"\\\\n\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source)\n",
    "category": "methods",
    "name": "source",
    "path": "/docs/RegExp/source",
    "searchString": "RegExp.prototype.source"
  },
  {
    "body": "# RegExp.prototype.sticky\n\nThe **`sticky`** property reflects whether or not the search is \"sticky\" (searches in strings only from the index indicated by the `lastIndex` property of this `regular expression`). **`sticky`** is a read-only property of an individual regular expression object.\n\n## Usage examples\n\n```js\nconst string = 'table football';\nconst regex = new RegExp('foo', 'y');\n\nregex.lastIndex = 6;\nregex.sticky; // -> true\nregex.test(string); // -> true\nregex.test(string); // -> false\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky)\n",
    "category": "methods",
    "name": "sticky",
    "path": "/docs/RegExp/sticky",
    "searchString": "RegExp.prototype.sticky"
  },
  {
    "body": "# RegExp.prototype.unicode()\n\nThe **`unicode`** property indicates whether or not the **\"u\"** flag is used with a `regular expression`. **`unicode`** is a read-only property of an individual regular expression instance.\n\n## Usage examples\n\n```js\nconst regex1 = new RegExp('\\u{61}');\nconst regex2 = new RegExp('\\u{61}', 'u');\n\nregex1.unicode; // -> false\nregex2.unicode; // -> true\nregex1.source; // -> \"a\"\nregex2.source; // -> \"a\"\n```\n\n---\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode)\n",
    "category": "methods",
    "name": "unicode",
    "path": "/docs/RegExp/unicode",
    "searchString": "RegExp.prototype.unicode"
  }
]